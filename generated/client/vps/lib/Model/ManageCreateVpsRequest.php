<?php
/**
 * ManageCreateVpsRequest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Generated\Client\Vps
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Generated\Client\Vps\Model;

use \ArrayAccess;
use \Generated\Client\Vps\ObjectSerializer;

/**
 * ManageCreateVpsRequest Class Doc Comment
 *
 * @category Class
 * @package  Generated\Client\Vps
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ManageCreateVpsRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Manage_CreateVpsRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'display_name' => 'string',
        'hostname' => 'string',
        'description' => 'string',
        'configuration_id' => 'string',
        'operating_system_id' => 'int',
        'snapshot_id' => 'string',
        'ssh_keys' => 'int[]',
        'password' => 'string',
        'beget_ssh_access_allowed' => 'bool',
        'software' => '\Generated\Client\Vps\Model\ManageSoftwareInstallInfo[]',
        'private_networks' => '\Generated\Client\Vps\Model\ManagePrivateNetworkInfo[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'display_name' => null,
        'hostname' => null,
        'description' => null,
        'configuration_id' => null,
        'operating_system_id' => 'uint32',
        'snapshot_id' => 'uint64',
        'ssh_keys' => 'uint32',
        'password' => null,
        'beget_ssh_access_allowed' => null,
        'software' => null,
        'private_networks' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'display_name' => 'display_name',
        'hostname' => 'hostname',
        'description' => 'description',
        'configuration_id' => 'configuration_id',
        'operating_system_id' => 'operating_system_id',
        'snapshot_id' => 'snapshot_id',
        'ssh_keys' => 'ssh_keys',
        'password' => 'password',
        'beget_ssh_access_allowed' => 'beget_ssh_access_allowed',
        'software' => 'software',
        'private_networks' => 'private_networks'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'display_name' => 'setDisplayName',
        'hostname' => 'setHostname',
        'description' => 'setDescription',
        'configuration_id' => 'setConfigurationId',
        'operating_system_id' => 'setOperatingSystemId',
        'snapshot_id' => 'setSnapshotId',
        'ssh_keys' => 'setSshKeys',
        'password' => 'setPassword',
        'beget_ssh_access_allowed' => 'setBegetSshAccessAllowed',
        'software' => 'setSoftware',
        'private_networks' => 'setPrivateNetworks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'display_name' => 'getDisplayName',
        'hostname' => 'getHostname',
        'description' => 'getDescription',
        'configuration_id' => 'getConfigurationId',
        'operating_system_id' => 'getOperatingSystemId',
        'snapshot_id' => 'getSnapshotId',
        'ssh_keys' => 'getSshKeys',
        'password' => 'getPassword',
        'beget_ssh_access_allowed' => 'getBegetSshAccessAllowed',
        'software' => 'getSoftware',
        'private_networks' => 'getPrivateNetworks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['display_name'] = $data['display_name'] ?? null;
        $this->container['hostname'] = $data['hostname'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['configuration_id'] = $data['configuration_id'] ?? null;
        $this->container['operating_system_id'] = $data['operating_system_id'] ?? null;
        $this->container['snapshot_id'] = $data['snapshot_id'] ?? null;
        $this->container['ssh_keys'] = $data['ssh_keys'] ?? null;
        $this->container['password'] = $data['password'] ?? null;
        $this->container['beget_ssh_access_allowed'] = $data['beget_ssh_access_allowed'] ?? null;
        $this->container['software'] = $data['software'] ?? null;
        $this->container['private_networks'] = $data['private_networks'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name Отображаемое имя Vps (required)
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets hostname
     *
     * @return string|null
     */
    public function getHostname()
    {
        return $this->container['hostname'];
    }

    /**
     * Sets hostname
     *
     * @param string|null $hostname Имя хоста (в ОС)
     *
     * @return self
     */
    public function setHostname($hostname)
    {
        $this->container['hostname'] = $hostname;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Дескрипшн (опциональный). просто какой-нить текст
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets configuration_id
     *
     * @return string|null
     */
    public function getConfigurationId()
    {
        return $this->container['configuration_id'];
    }

    /**
     * Sets configuration_id
     *
     * @param string|null $configuration_id Идентификатор конфигурации (required)
     *
     * @return self
     */
    public function setConfigurationId($configuration_id)
    {
        $this->container['configuration_id'] = $configuration_id;

        return $this;
    }

    /**
     * Gets operating_system_id
     *
     * @return int|null
     */
    public function getOperatingSystemId()
    {
        return $this->container['operating_system_id'];
    }

    /**
     * Sets operating_system_id
     *
     * @param int|null $operating_system_id Идентификатор ОС oneof{source}
     *
     * @return self
     */
    public function setOperatingSystemId($operating_system_id)
    {
        $this->container['operating_system_id'] = $operating_system_id;

        return $this;
    }

    /**
     * Gets snapshot_id
     *
     * @return string|null
     */
    public function getSnapshotId()
    {
        return $this->container['snapshot_id'];
    }

    /**
     * Sets snapshot_id
     *
     * @param string|null $snapshot_id Идентификатор снапшота, который восстановится в новую Vps oneof{source}
     *
     * @return self
     */
    public function setSnapshotId($snapshot_id)
    {
        $this->container['snapshot_id'] = $snapshot_id;

        return $this;
    }

    /**
     * Gets ssh_keys
     *
     * @return int[]|null
     */
    public function getSshKeys()
    {
        return $this->container['ssh_keys'];
    }

    /**
     * Sets ssh_keys
     *
     * @param int[]|null $ssh_keys ID публичных ssh-ключей (предварительно созданные в системе)
     *
     * @return self
     */
    public function setSshKeys($ssh_keys)
    {
        $this->container['ssh_keys'] = $ssh_keys;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password Пароль (должен включать минимум 1 upper, 1 lower, 1 digit, 1 special char. Мин длина - 8 символов)
     *
     * @return self
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets beget_ssh_access_allowed
     *
     * @return bool|null
     */
    public function getBegetSshAccessAllowed()
    {
        return $this->container['beget_ssh_access_allowed'];
    }

    /**
     * Sets beget_ssh_access_allowed
     *
     * @param bool|null $beget_ssh_access_allowed Согласие на доступ к пользовательской машине через SSH-ключи BeGet Необходимо для использования пользователем файлового менеджера
     *
     * @return self
     */
    public function setBegetSshAccessAllowed($beget_ssh_access_allowed)
    {
        $this->container['beget_ssh_access_allowed'] = $beget_ssh_access_allowed;

        return $this;
    }

    /**
     * Gets software
     *
     * @return \Generated\Client\Vps\Model\ManageSoftwareInstallInfo[]|null
     */
    public function getSoftware()
    {
        return $this->container['software'];
    }

    /**
     * Sets software
     *
     * @param \Generated\Client\Vps\Model\ManageSoftwareInstallInfo[]|null $software Информация о ПО, которое необходимо установить
     *
     * @return self
     */
    public function setSoftware($software)
    {
        $this->container['software'] = $software;

        return $this;
    }

    /**
     * Gets private_networks
     *
     * @return \Generated\Client\Vps\Model\ManagePrivateNetworkInfo[]|null
     */
    public function getPrivateNetworks()
    {
        return $this->container['private_networks'];
    }

    /**
     * Sets private_networks
     *
     * @param \Generated\Client\Vps\Model\ManagePrivateNetworkInfo[]|null $private_networks Приватные сети, к которым необходимо подключить VPS
     *
     * @return self
     */
    public function setPrivateNetworks($private_networks)
    {
        $this->container['private_networks'] = $private_networks;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


