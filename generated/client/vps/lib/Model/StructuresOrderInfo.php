<?php
/**
 * StructuresOrderInfo
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Generated\Client\Vps
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Generated\Client\Vps\Model;

use \ArrayAccess;
use \Generated\Client\Vps\ObjectSerializer;

/**
 * StructuresOrderInfo Class Doc Comment
 *
 * @category Class
 * @package  Generated\Client\Vps
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class StructuresOrderInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Structures_OrderInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'vps_id' => 'string',
        'vps_name' => 'string',
        'type' => 'string',
        'date_create' => 'string',
        'date_complete' => 'string',
        'path' => 'string[]',
        'status' => 'string',
        'copy_info' => '\Generated\Client\Vps\Model\StructuresCopyInfo',
        'affect_live' => 'bool',
        'target' => 'string',
        'error_details' => '\Generated\Client\Vps\Model\StructuresOrderInfoErrorDetails'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uint64',
        'vps_id' => null,
        'vps_name' => null,
        'type' => 'enum',
        'date_create' => null,
        'date_complete' => null,
        'path' => null,
        'status' => 'enum',
        'copy_info' => null,
        'affect_live' => null,
        'target' => null,
        'error_details' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'vps_id' => 'vps_id',
        'vps_name' => 'vps_name',
        'type' => 'type',
        'date_create' => 'date_create',
        'date_complete' => 'date_complete',
        'path' => 'path',
        'status' => 'status',
        'copy_info' => 'copy_info',
        'affect_live' => 'affect_live',
        'target' => 'target',
        'error_details' => 'error_details'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'vps_id' => 'setVpsId',
        'vps_name' => 'setVpsName',
        'type' => 'setType',
        'date_create' => 'setDateCreate',
        'date_complete' => 'setDateComplete',
        'path' => 'setPath',
        'status' => 'setStatus',
        'copy_info' => 'setCopyInfo',
        'affect_live' => 'setAffectLive',
        'target' => 'setTarget',
        'error_details' => 'setErrorDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'vps_id' => 'getVpsId',
        'vps_name' => 'getVpsName',
        'type' => 'getType',
        'date_create' => 'getDateCreate',
        'date_complete' => 'getDateComplete',
        'path' => 'getPath',
        'status' => 'getStatus',
        'copy_info' => 'getCopyInfo',
        'affect_live' => 'getAffectLive',
        'target' => 'getTarget',
        'error_details' => 'getErrorDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['vps_id'] = $data['vps_id'] ?? null;
        $this->container['vps_name'] = $data['vps_name'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['date_create'] = $data['date_create'] ?? null;
        $this->container['date_complete'] = $data['date_complete'] ?? null;
        $this->container['path'] = $data['path'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['copy_info'] = $data['copy_info'] ?? null;
        $this->container['affect_live'] = $data['affect_live'] ?? null;
        $this->container['target'] = $data['target'] ?? null;
        $this->container['error_details'] = $data['error_details'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Идентификатор задания
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets vps_id
     *
     * @return string|null
     */
    public function getVpsId()
    {
        return $this->container['vps_id'];
    }

    /**
     * Sets vps_id
     *
     * @param string|null $vps_id Идентификатор VPS (uuid)
     *
     * @return self
     */
    public function setVpsId($vps_id)
    {
        $this->container['vps_id'] = $vps_id;

        return $this;
    }

    /**
     * Gets vps_name
     *
     * @return string|null
     */
    public function getVpsName()
    {
        return $this->container['vps_name'];
    }

    /**
     * Sets vps_name
     *
     * @param string|null $vps_name Имя сервера, на который выполнялось восстановление
     *
     * @return self
     */
    public function setVpsName($vps_name)
    {
        $this->container['vps_name'] = $vps_name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Тип задания
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets date_create
     *
     * @return string|null
     */
    public function getDateCreate()
    {
        return $this->container['date_create'];
    }

    /**
     * Sets date_create
     *
     * @param string|null $date_create Дата создания задания (RFC3339)
     *
     * @return self
     */
    public function setDateCreate($date_create)
    {
        $this->container['date_create'] = $date_create;

        return $this;
    }

    /**
     * Gets date_complete
     *
     * @return string|null
     */
    public function getDateComplete()
    {
        return $this->container['date_complete'];
    }

    /**
     * Sets date_complete
     *
     * @param string|null $date_complete Дата завершения задания (RFC3339)
     *
     * @return self
     */
    public function setDateComplete($date_complete)
    {
        $this->container['date_complete'] = $date_complete;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string[]|null
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string[]|null $path Список путей для восстановления/скачивания
     *
     * @return self
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Статус завершения
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets copy_info
     *
     * @return \Generated\Client\Vps\Model\StructuresCopyInfo|null
     */
    public function getCopyInfo()
    {
        return $this->container['copy_info'];
    }

    /**
     * Sets copy_info
     *
     * @param \Generated\Client\Vps\Model\StructuresCopyInfo|null $copy_info copy_info
     *
     * @return self
     */
    public function setCopyInfo($copy_info)
    {
        $this->container['copy_info'] = $copy_info;

        return $this;
    }

    /**
     * Gets affect_live
     *
     * @return bool|null
     */
    public function getAffectLive()
    {
        return $this->container['affect_live'];
    }

    /**
     * Sets affect_live
     *
     * @param bool|null $affect_live Операция производится без выключения VPS
     *
     * @return self
     */
    public function setAffectLive($affect_live)
    {
        $this->container['affect_live'] = $affect_live;

        return $this;
    }

    /**
     * Gets target
     *
     * @return string|null
     */
    public function getTarget()
    {
        return $this->container['target'];
    }

    /**
     * Sets target
     *
     * @param string|null $target Директория, в которую производилось восстановление (актуально для выборочного восстановления файлов)
     *
     * @return self
     */
    public function setTarget($target)
    {
        $this->container['target'] = $target;

        return $this;
    }

    /**
     * Gets error_details
     *
     * @return \Generated\Client\Vps\Model\StructuresOrderInfoErrorDetails|null
     */
    public function getErrorDetails()
    {
        return $this->container['error_details'];
    }

    /**
     * Sets error_details
     *
     * @param \Generated\Client\Vps\Model\StructuresOrderInfoErrorDetails|null $error_details error_details
     *
     * @return self
     */
    public function setErrorDetails($error_details)
    {
        $this->container['error_details'] = $error_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


